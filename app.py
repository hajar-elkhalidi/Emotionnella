import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import plotly.express as px
from sklearn.preprocessing import StandardScaler
import joblib
import os
import pdf_generator as pg

# Configuration de la page Streamlit
st.set_page_config(page_title="√âmotionnella", layout="wide")
st.title("√âmotionnella - Analyse des √âmotions √âtudiantes")

# Initialisation des variables de session si n√©cessaire
if 'admin_auth' not in st.session_state:
    st.session_state.admin_auth = False
if 'show_password' not in st.session_state:
    st.session_state.show_password = False

# --- Chargement du mod√®le de clustering ---
@st.cache_resource
def load_model():
    return joblib.load("clustering_model.pkl")

model_dict = load_model()
model = model_dict["kmeans"]
scaler = model_dict.get("scaler", StandardScaler())

# --- Authentification Admin ---
def gestion_auth_admin():
    if 'admin_auth' not in st.session_state:
        st.session_state.admin_auth = False
    if 'show_password' not in st.session_state:
        st.session_state.show_password = False
    
    # Affichage du bouton de cadenas
    col1, col2 = st.sidebar.columns([1, 5])
    with col1:
        if st.session_state.admin_auth:
            # Afficher un cadenas ouvert si authentifi√©
            if st.button("üîì", help="Cliquez pour d√©connecter"):
                st.session_state.admin_auth = False
                st.session_state.show_password = False
                st.rerun()
        else:
            # Afficher un cadenas ferm√© si non authentifi√©
            if st.button("üîí", help="Cliquez pour vous connecter"):
                st.session_state.show_password = not st.session_state.show_password
                st.rerun()
    
    with col2:
        if st.session_state.admin_auth:
            st.success("Mode administrateur activ√©")
        elif st.session_state.show_password:
            st.write("Entrez le mot de passe:")

    # Afficher le champ de mot de passe si n√©cessaire
    if st.session_state.show_password and not st.session_state.admin_auth:
        mdp = st.sidebar.text_input("", type="password")
        if mdp == "emotionnella123":
            st.session_state.admin_auth = True
            st.session_state.show_password = False
            st.sidebar.success("Authentification r√©ussie!")
            st.rerun()
        elif mdp != "":
            st.sidebar.error("Mot de passe incorrect")
    
    return st.session_state.admin_auth

# Appel de la fonction d'authentification
admin_mode = gestion_auth_admin()

# --- Param√®tres de donn√©es ---
st.sidebar.header("Param√®tres de donn√©es")
source = st.sidebar.radio("Source des donn√©es", ["Fichiers internes", "T√©l√©verser un fichier"])

# --- Chargement et nettoyage des donn√©es ---
@st.cache_data
def load_default_data():
    return pd.read_excel("donnees_etudiants.xlsx")

def convert_time(time_str):
    if pd.isna(time_str) or time_str == "-":
        return np.nan
    
    # Convertir en string si ce n'est pas d√©j√† le cas
    if not isinstance(time_str, str):
        return float(time_str)
    
    # Cas 1: Format "X heures Y min"
    if 'heures' in time_str:
        parts = time_str.split('heures')
        heures = float(parts[0].strip())
        reste = parts[1].strip()
        
        if 'min' in reste:
            mins = float(reste.split('min')[0].strip())
        else:
            mins = 0
        return heures * 60 + mins
    
    # Cas 2: Format "X min Y s" 
    elif 'min' in time_str:
        parts = time_str.split('min')
        mins = float(parts[0].strip())
        secs = float(parts[1].replace('s', '').strip()) if 's' in parts[1] else 0
        return mins + secs / 60
    
    # Cas 3: Format "X s" 
    elif 's' in time_str:
        return float(time_str.replace('s', '').strip()) / 60
    
    # Si aucun format reconnu
    else:
        try:
            return float(time_str) 
        except:
            return np.nan

@st.cache_data
def nettoyer_donnees(df):    
    # 1. Cr√©ation du Nom Complet
    if 'Pr√©nom' in df.columns and 'Nom' in df.columns and 'Nom Complet' not in df.columns:
        df['Nom Complet'] = df['Pr√©nom'] + ' ' + df['Nom']
    
    # 2. Identification des colonnes de questions avec format standard
    question_cols = [col for col in df.columns if col.startswith('Q.') and '/1,00' in col]
    
    if not question_cols:
        question_cols = [col for col in df.columns if col.startswith('Q.')]
    
    # 3. Traitement des colonnes num√©riques (questions et note finale)
    important_numcols = ['Note/20,00']
    if question_cols:
        for col in question_cols + important_numcols:
            if col in df.columns:
                # Remplacer tirets, virgules et convertir en float
                df[col] = df[col].replace("-", np.nan)
                if df[col].dtype == object:
                    df[col] = df[col].str.replace(',', '.', regex=False).astype(float)
        
        # Supprimer les lignes o√π la note finale est NaN
        if 'Note/20,00' in df.columns:
            df = df.dropna(subset=['Note/20,00'])
        
        # Remplire les NaN des questions par 0
        df[question_cols] = df[question_cols].fillna(0)
    
    # 4. Traitement du temps
    if 'Temps utilis√©' in df.columns and 'Temps utilis√© (min)' not in df.columns:
        df['Temps utilis√© (min)'] = df['Temps utilis√©'].apply(convert_time)
        df = df.drop('Temps utilis√©', axis=1)
    
    # 5. Limitation du temps autoris√© √† 35 minutes
    if 'Temps utilis√© (min)' in df.columns:
        df = df[df['Temps utilis√© (min)'] < 20]
    
    # 6. Normalisation des noms de colonnes pour les questions
    rename_dict = {}
    for col in question_cols:
        if '/1,00' in col:
            new_name = col.split('/')[0].strip()
            rename_dict[col] = new_name
    
    if rename_dict:
        df = df.rename(columns=rename_dict)
    
    # 7. R√©organisation et s√©lection des colonnes importantes
    important_cols = ['Nom Complet', 'Fili√®re', 'Temps utilis√© (min)', 'Note/20,00']
    # Mise √† jour des colonnes de questions apr√®s renommage
    question_cols = [col for col in df.columns if col.startswith('Q.')]
    
    # Conserver uniquement les colonnes importantes qui existent
    cols_to_keep = [col for col in important_cols if col in df.columns] + question_cols
    
    if cols_to_keep:
        df = df[cols_to_keep]

    return df.dropna().drop_duplicates()

if source == "T√©l√©verser un fichier":
    uploaded_files = st.file_uploader("Choisissez un ou plusieurs fichiers .xlsx ou .csv", 
                                     type=["xlsx", "csv"], accept_multiple_files=True)
    
    if uploaded_files:
        # Traitement s'il y a plusieurs fichiers
        if len(uploaded_files) > 1:
            st.info(f"{len(uploaded_files)} fichiers t√©l√©vers√©s. Fusion en cours...")
            
            df_list = []
            for file in uploaded_files:
                try:
                    # D√©terminer le format du fichier
                    if file.name.endswith(".csv"):
                        temp_df = pd.read_csv(file)
                    else:
                        temp_df = pd.read_excel(file)
                    
                    # Supprimer la derni√®re ligne si c'est une moyenne
                    if "Moyenne" in str(temp_df.iloc[-1].values):
                        temp_df = temp_df.iloc[:-1]
                        
                    # Extraire la fili√®re du nom de fichier
                    import re
                    filiere_match = re.search(r'MTU\s+(\w+)', file.name)
                    if filiere_match:
                        filiere = filiere_match.group(1)
                    else:
                        # Fallback si le pattern ne correspond pas
                        if "-" in file.name:
                            filiere = file.name.split("-")[0].strip()
                        else:
                            filiere = file.name.split(".")[0].strip()
                    
                    # Cr√©er la colonne fili√®re 
                    if "Fili√®re" not in temp_df.columns:
                        temp_df["Fili√®re"] = filiere
                    
                    df_list.append(temp_df)
                    
                except Exception as e:
                    st.error(f"Erreur lors du traitement du fichier {file.name}: {str(e)}")
            
            # Fusionner tous les fichiers
            if df_list:
                df = pd.concat(df_list, ignore_index=True)
                # Nettoyer les donn√©es
                df = nettoyer_donnees(df)
            else:
                st.error("Aucun fichier n'a pu √™tre trait√© correctement.")
                st.stop()
            
        else: 
            file = uploaded_files[0]
            try:
                if file.name.endswith(".csv"):
                    df = pd.read_csv(file)
                else:
                    df = pd.read_excel(file)
                
                # Supprimer la derni√®re ligne si c'est une moyenne
                if "Moyenne" in str(df.iloc[-1].values):
                    df = df.iloc[:-1]
                    
                # Extraire la fili√®re du nom de fichier
                import re
                filiere_match = re.search(r'MTU\s+(\w+)', file.name)
                if filiere_match:
                    filiere = filiere_match.group(1)
                else:
                    # Fallback si le pattern ne correspond pas
                    if "-" in file.name:
                        filiere = file.name.split("-")[0].strip()
                    else:
                        filiere = file.name.split(".")[0].strip()
                
                # Cr√©er la colonne fili√®re 
                if "Fili√®re" not in df.columns:
                    df["Fili√®re"] = filiere
                
                # Nettoyer les donn√©es
                df = nettoyer_donnees(df)
                
            except Exception as e:
                st.error(f"Erreur lors du traitement du fichier {file.name}: {str(e)}")
                st.stop()
    else:
        st.warning("Veuillez t√©l√©verser un fichier pour continuer.")
        st.stop()
else:
    df = load_default_data()

# --- Anonymisation des noms ---
def anonymiser_nom(nom_complet):
    parts = nom_complet.split()
    if len(parts) >= 2:
        return f"{parts[0]} {parts[1][0]}."
    return nom_complet

if not admin_mode and "Nom Complet" in df.columns:
    df["Nom Complet"] = df["Nom Complet"].apply(anonymiser_nom)

# --- Filtrage par fili√®re ---
if "Fili√®re" in df.columns:
    filieres = df["Fili√®re"].unique().tolist()
    filieres_selectionnees = st.multiselect("Choisissez les fili√®res √† analyser", filieres, default=filieres)
    df = df[df["Fili√®re"].isin(filieres_selectionnees)]

# --- Aper√ßu ---
st.subheader("Aper√ßu des donn√©es")
st.dataframe(df)

# --- Graphiques ---
question_cols = [col for col in df.columns if col.startswith("Q.")]

# Boxplot de la note par fili√®re
st.subheader("Distribution des Notes par Fili√®re")
fig1 = px.box(df, x="Fili√®re", y="Note/20,00", color="Fili√®re")
st.plotly_chart(fig1, use_container_width=True, key="box_plot") 

# Bar chart du taux de r√©ussite par question
st.subheader("Taux de R√©ussite par Question")
taux_reussite = df[question_cols].mean() * 100
taux_df = taux_reussite.reset_index()
taux_df.columns = ["Question", "Taux de R√©ussite (%)"]

fig2 = px.bar(
    taux_df,
    x="Question",
    y="Taux de R√©ussite (%)",
    color="Taux de R√©ussite (%)",
    color_continuous_scale="Blues"
)
st.plotly_chart(fig2, use_container_width=True, key="bar_plot")

# --- Top 5 √âtudiants par Fili√®re ---
st.subheader("Top 5 des √âtudiants par Fili√®re")

# Fonction pour obtenir les 5 meilleurs √©tudiants par fili√®re
def get_top_students(dataframe, n=5):
    # Grouper par fili√®re et trier par note dans chaque groupe
    top_students_dict = {}
    
    for filiere in dataframe["Fili√®re"].unique():
        # Filtrer par fili√®re
        filiere_df = dataframe[dataframe["Fili√®re"] == filiere]
        # Trier par note d√©croissante
        filiere_df = filiere_df.sort_values(by="Note/20,00", ascending=False)
        # Prendre les n premiers
        top_n = filiere_df.head(n)
        top_students_dict[filiere] = top_n
    
    return top_students_dict

# Obtenir les top 5 √©tudiants par fili√®re
top_students_dict = get_top_students(df, n=5)

# Afficher les top 5 pour chaque fili√®re dans des onglets
tabs = st.tabs(list(top_students_dict.keys()))

for i, (filiere, students_df) in enumerate(top_students_dict.items()):
    with tabs[i]:
        # Ajouter un emoji m√©daille pour les 3 premiers
        medals = ["", "", "", "", ""]
        students_display = students_df.copy()
        students_display.reset_index(drop=True, inplace=True)
        students_display.index = students_display.index + 1  # Commencer √† 1 au lieu de 0
        
        # Ajouter une colonne pour les m√©dailles
        if len(students_display) > 0:
            students_display["Rang"] = [f"{medals[i-1]} {i}" if i <= len(medals) else f"{i}" for i in range(1, len(students_display) + 1)]
            
            # R√©organiser les colonnes
            cols = ["Rang", "Nom Complet", "Note/20,00", "Temps utilis√© (min)"]
            if "√âmotion" in students_display.columns:
                cols.append("√âmotion")
            
            # S√©lectionner uniquement les colonnes qui existent
            existing_cols = [col for col in cols if col in students_display.columns]
            
            # Afficher le tableau
            st.dataframe(students_display[existing_cols], hide_index=True)
            
            # Afficher des statistiques suppl√©mentaires
            st.markdown(f"**Note moyenne des 5 meilleurs**: {students_display['Note/20,00'].mean():.2f}/20")
            if "Temps utilis√© (min)" in students_display.columns:
                st.markdown(f"**Temps moyen des 5 meilleurs**: {students_display['Temps utilis√© (min)'].mean():.2f} minutes")
        else:
            st.info(f"Aucun √©tudiant trouv√© pour la fili√®re {filiere}")

# --- Clustering ---
st.subheader("Clustering des √âtudiants avec KMeans (4 groupes)")
if "Temps utilis√© (min)" in df.columns and "Note/20,00" in df.columns:
    X = df[["Temps utilis√© (min)", "Note/20,00"]].values
    X_scaled = scaler.transform(X)
    labels = model.predict(X_scaled)
    df["Cluster"] = labels + 1

    # Mappage des clusters aux √©motions
    legendes_emotions = {
        1: "Confiant(e) mais prenant son temps", 
        2: "Stress√©(e)",  
        3: "Frustr√©(e) ou abandonn√©(e)",  
        4: "Confiant(e) rapide"
    }
    
    df["√âmotion"] = df["Cluster"].map(legendes_emotions)
    
    # Mappage des couleurs selon l'√©motion du cluster
    cluster_colors = {
        "Confiant(e) mais prenant son temps": "#FFABAB",  # Rose clair
        "Stress√©(e)": "#83C9FF",  # Bleu clair
        "Frustr√©(e) ou abandonn√©(e)": "#0068C9",  # Bleu fonc√©
        "Confiant(e) rapide": "#FF2B2B"  # Rouge vif
    }

    # Cr√©ation du graphique
    fig3 = px.scatter(df, x="Temps utilis√© (min)", y="Note/20,00", color="√âmotion", symbol="Fili√®re",
                      title="Clustering des √âtudiants selon l'√âmotion", hover_data=["Nom Complet"],
                      color_discrete_map=cluster_colors)

    st.plotly_chart(fig3)

    # Cr√©er un tableau de r√©sum√© pour les clusters
    df = df.reset_index(drop=True)
    profil_clusters = []

    for cluster in sorted(df['Cluster'].unique()):
        cluster_data = df[df['Cluster'] == cluster]
        nb_etudiants = len(cluster_data)
        note_moy = cluster_data['Note/20,00'].mean()
        temps_moy = cluster_data['Temps utilis√© (min)'].mean()

        if note_moy > 15:
            caractere = "‚úì Hautes notes avec temps mod√©r√©"
        elif note_moy < 5:
            caractere = "‚®ª Basses notes avec temps court"
        else:
            caractere = "‚Äì Notes moyennes avec temps variable"

        profil_clusters.append({
            "Nom du groupe": f"{legendes_emotions[cluster]}",
            "Nombre d'√©tudiants": nb_etudiants,
            "Note moyenne": round(note_moy, 2),
            "Temps moyen (min)": round(temps_moy, 2),
            "Caract√©ristique principale": caractere
        })

    # Convertir en DataFrame
    profil_df = pd.DataFrame(profil_clusters)

    # Afficher dans Streamlit
    st.subheader("Profil des Clusters")
    st.table(profil_df)

# --- G√©n√©rer le PDF ---
st.subheader("Le Rapport PDF")
if st.button("G√©n√©rer le PDF du Rapport"):
    # V√©rifier si fig3 et profil_df existent
    if 'fig3' in locals() and 'profil_df' in locals():
        pdf_path = pg.generer_pdf(df, fig1, fig2, fig3=fig3, profil_df=profil_df, top_students_dict=top_students_dict)
    else:
        pdf_path = pg.generer_pdf(df, fig1, fig2, top_students_dict=top_students_dict)
        
    with open(pdf_path, "rb") as f:
        st.download_button("T√©l√©charger le Rapport PDF", f, file_name="rapport_emotionnella.pdf")
    os.remove(pdf_path)

# --- section pour visualiser un √©tudiant sp√©cifique ---
st.subheader("Analyse des √âmotions d'un √âtudiant Sp√©cifique")

# D√©terminer s'il y a des √©tudiants √† analyser
if len(df) > 0 and "Nom Complet" in df.columns:
    # Cr√©er un s√©lecteur pour choisir un √©tudiant
    etudiants = sorted(df["Nom Complet"].unique().tolist())
    etudiant_selectionne = st.selectbox("S√©lectionnez un √©tudiant", etudiants)
    
    # R√©cup√©rer les donn√©es de l'√©tudiant s√©lectionn√©
    etudiant_data = df[df["Nom Complet"] == etudiant_selectionne].iloc[0]
    
    # Cr√©er un affichage en colonnes pour les informations cl√©s
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Note", f"{etudiant_data['Note/20,00']:.2f}/20")
    
    with col2:
        if "Temps utilis√© (min)" in etudiant_data:
            st.metric("Temps utilis√©", f"{etudiant_data['Temps utilis√© (min)']:.2f} min")
    
    with col3:
        if "√âmotion" in etudiant_data:
            # Utiliser une couleur diff√©rente selon l'√©motion
            emotion = etudiant_data["√âmotion"]
            emoji = ""
            if "Confiant(e) rapide" in emotion:
                emoji = "üòä"
            elif "Confiant(e) mais prenant son temps" in emotion:
                emoji = "üôÇ"
            elif "Stress√©(e)" in emotion:
                emoji = "üò∞"
            elif "Frustr√©(e)" in emotion:
                emoji = "üò£"
            
            st.metric("√âtat √©motionnel", f"{emoji} {emotion}")
    
    # Afficher les performances par question
    question_cols = [col for col in df.columns if col.startswith("Q.")]
    
    if question_cols:
        st.subheader(f"Performance de {etudiant_selectionne} par Question")
        
        # Cr√©er un DataFrame pour les performances aux questions
        performance_data = {
            "Question": question_cols,
            "Score": [etudiant_data[q] for q in question_cols]
        }
        perf_df = pd.DataFrame(performance_data)
                
        # Comparer avec la moyenne de la fili√®re
        if "Fili√®re" in etudiant_data:
            filiere = etudiant_data["Fili√®re"]
            filiere_avg = df[df["Fili√®re"] == filiere][question_cols].mean()
                        
            # Cr√©er un DataFrame pour la comparaison
            compare_data = []
            for q in question_cols:
                compare_data.append({
                    "Question": q,
                    "Score √âtudiant": etudiant_data[q],
                    "Moyenne Fili√®re": filiere_avg[q]
                })
            
            compare_df = pd.DataFrame(compare_data)
            
            # Cr√©er un graphique √† barres pour la comparaison
            fig_compare = px.bar(compare_df, x="Question", y=["Score √âtudiant", "Moyenne Fili√®re"],
                               barmode="group", title=f"Comparaison {etudiant_selectionne} vs Moyenne {filiere}",
                               labels={"value": "Score (0 = Faux, 1 = Correct)", "variable": "Type de Score"})
            st.plotly_chart(fig_compare, use_container_width=True)
    
    # Afficher un r√©capitulatif des performances et des recommandations
    st.subheader("Analyse et Recommandations")
    
    # D√©terminer des recommandations bas√©es sur l'√©motion
    if "√âmotion" in etudiant_data:
        emotion = etudiant_data["√âmotion"]
        note = etudiant_data["Note/20,00"]
        
        st.write(f"### Profil de {etudiant_selectionne}")
        
        if "Confiant(e) rapide" in emotion:
            st.success(f"""
            **√âtat √©motionnel d√©tect√©: Confiant(e) et rapide** üòä
            
            Cet √©tudiant d√©montre une excellente ma√Ætrise du sujet et une gestion efficace du temps.
            - Ses performances sont excellentes, avec une note de {note:.2f}/20
            - Son rythme rapide indique une grande confiance dans ses r√©ponses
            
            **Recommandations:**
            - Continuer √† maintenir cette efficacit√©
            - Peut √™tre encourag√© √† approfondir d'autres sujets avanc√©s
            - Pourrait aider les autres √©tudiants en difficult√© (tutorat)
            """)
            
        elif "Confiant(e) mais prenant son temps" in emotion:
            st.info(f"""
            **√âtat √©motionnel d√©tect√©: Confiant(e) mais prenant son temps** üôÇ
            
            Cet √©tudiant montre une bonne ma√Ætrise du sujet mais pr√©f√®re travailler avec prudence.
            - Sa note de {note:.2f}/20 refl√®te une bonne compr√©hension
            - Son temps de travail plus long sugg√®re une approche m√©ticuleuse
            
            **Recommandations:**
            - Travailler sur la gestion du temps tout en maintenant la qualit√©
            - Exercices avec contraintes de temps pour am√©liorer la rapidit√©
            - Garder confiance dans ses premi√®res r√©ponses
            """)
            
        elif "Stress√©(e)" in emotion:
            st.warning(f"""
            **√âtat √©motionnel d√©tect√©: Stress√©(e)** üò∞
            
            Cet √©tudiant montre des signes de stress pendant l'examen.
            - Sa note de {note:.2f}/20 pourrait √™tre am√©lior√©e
            - Son temps de r√©ponse et ses r√©sultats sugg√®rent une anxi√©t√© de performance
            
            **Recommandations:**
            - Techniques de gestion du stress (respiration)
            - Plus d'exercices pratiques dans des conditions d'examen
            - √âtablir un plan de r√©vision progressif
            - Envisager des s√©ances de tutorat ou des sessions de questions-r√©ponses
            """)
            
        elif "Frustr√©(e)" in emotion:
            st.error(f"""
            **√âtat √©motionnel d√©tect√©: Frustr√©(e) ou ayant abandonn√©** üò£
            
            Cet √©tudiant semble avoir rencontr√© des difficult√©s importantes pendant l'examen.
            - Sa note de {note:.2f}/20 indique des lacunes √† combler
            - Son comportement sugg√®re un possible abandon ou une grande frustration
            
            **Recommandations:**
            - Identifier les concepts fondamentaux √† r√©viser
            - Pr√©voir des sessions de rattrapage cibl√©es
            - Envisager un accompagnement personnalis√©
            - Travailler sur la confiance et la pers√©v√©rance face aux difficult√©s
            """)
    else:
        st.write("Analyse √©motionnelle non disponible pour cet √©tudiant.")
else:
    st.info("Aucune donn√©e d'√©tudiant disponible. Veuillez t√©l√©charger un fichier ou s√©lectionner des fili√®res.")